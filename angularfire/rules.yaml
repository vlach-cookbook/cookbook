schema:
  type: object
  additionalProperties: false
  properties:
    # An array of recipe metadata, whose keys are generated by .push().
    recipesMeta:
      type: object
      $recipeId:
        type: object
        additionalProperties: false
        properties:
          # For now, the only metadata is the recipe title, but we may
          # include the author, last use time, etc. in the future.
          title: {type: string}
    # Details about the recipes, using the same keys as recipesMeta.
    recipesDetails:
      type: object
      $recipeId:
        type: object
        additionalProperties: false
        properties:
          # How many people the recipe serves
          serves: {type: number}
          # The time the recipe was added to the database.
          date: {type: number}
          ingredients:
            type: object
            # Ids generated by .push().
            $ingredient:
              type: object
              additionalProperties: false
              properties:
                quantity: {type: string}
                unit: {type: string}
                name: {type: string}
                # How the ingredient is prepared to be added to the
                # recipe. e.g. "diced", "roasted", etc.
                preparation: {type: string}
          # This may eventually be a firepad store, but for now is just text.
          directions: {type: string}
          categories:
            type: object
            # Array of categories, keyed by a push-id.
            $category: {type: string}
    recipeUrls:
      type: object
      # Maps a URI path component (the title mapped to [a-z0-9-]) to
      # the ID of the recipe.
      # More than one title can map to the same recipe.
      $recipeUrl:
        type: object
        constraint: $recipeUrl.matches(/[a-z0-9-]+/)
        additionalProperties: false
        properties:
          id: {type: string}
    # The next two keys make up the index by ingredient.
    # ingredientNames maps the name of an ingredient to the key for
    # that ingredient in the ingredientRecipes object.  A key in the
    # ingredientRecipes object is mapped to an object whose keys are
    # the recipe IDs containing that ingredient, and whose values are
    # that recipe's title.
    #
    # We use this 2-step lookup process to allow fetching all the
    # ingredient names without their recipes.
    ingredientNames:
      type: object
      $ingredient: {type: string}
    ingredientRecipes:
      type: object
      $ingredientId:
        type: object
        $recipeId:
          type: string
          constraint: next === root.recipesMeta[$recipeId].title

access:
  - location: /
    read:  true
    write: true # && isLoggedIn()
