// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model Recipe {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime           @updatedAt @db.Timestamptz(3)
  author      User               @relation(fields: [authorId], references: [id])
  authorId    String             @db.Uuid
  name        String             @db.Citext
  slug        String             @db.Citext
  servings    Int?
  sources     RecipeSource[]
  ingredients RecipeIngredient[]
  categories  Category[]
  steps       String[]
  notes       RecipeNote[]

  @@unique([authorId, name])
  @@unique([authorId, slug])
}

/// Where a recipe came from. Unless someone invented the recipe by themself,
/// it's polite to attribute a source.
model RecipeSource {
  id       Int    @id @default(autoincrement())
  Recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int

  type SourceType
  name String?
  url  String?

  @@index([recipeId, type])
}

enum SourceType {
  /// Directly copied from someone else's recipe.
  BY_PERSON
  /// Directly copied from a recipe on a webpage.
  FROM_WEBPAGE
  /// Modified from someone else's recipe.
  BASED_ON_PERSON
  /// Modified from a recipe on a webpage.
  BASED_ON_WEBPAGE
}

/// An ingredient line in a recipe, like "1 cup sugar".
model RecipeIngredient {
  /// Gives the ingredients an order in the recipe.
  order       Int
  amount      String?
  /// A missing unit means the ingredient comes in items, like "3 eggs".
  unit        String?
  name        String
  /// How the ingredient was prepared, like "chopped".
  preparation String?

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int

  @@id([recipeId, order])
}

// Anyone can add a note to any recipe. These notes hold both free-form comments and information on
// when someone cooked the recipe. Empty comments won't be shown on the default recipe view, but
// they can contribute to an average cooking time or help someone find a recipe based on when they
// cooked it.
model RecipeNote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @db.Uuid

  // Markdown-formatted. Not shown if it's empty.
  content String @default("")

  // True if the author wants to show this note to other people.
  public Boolean @default(true)
  // True if the recipe's author doesn't want the note to appear on their recipe.
  hidden Boolean @default(false)

  // This is the time the author clicked "I'm making this recipe."
  authorCookedRecipeAt DateTime? @db.Timestamptz(0)
  // These times are whole numbers of seconds, both because Prisma doesn't support an interval type,
  // and because Postgres' interval type is 16 bytes, compared to the 4 bytes we're using for
  // intervals here.
  totalTimeSeconds     Int?
  prepTimeSeconds      Int?
  cookTimeSeconds      Int?
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique @db.Citext

  Recipes Recipe[]
}

// Recipes that are partway through being imported but might not fully fit the
// database's data model. These will be manageable through the /account page.
model DraftRecipe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid

  // Expected to conform to @lib/json-recipe.ts/JsonRecipe.
  data Json

  @@index(userId)
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  username     String        @unique @db.Citext
  Recipes      Recipe[]
  DraftRecipes DraftRecipe[]

  GoogleUser  GoogleUser[]
  sessions    Session[]
  recipeNotes RecipeNote[]
}

model GoogleUser {
  /// Google's ID, exposed as the 'sub' claim in their JWTs.
  gid    String @id
  /// The user's verified email address, which this app uses to create inter-user trust
  /// relationships.
  email  String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
}

model Session {
  // 128-bit random ID, base64url-encoded, for storing in a client-side cookie.
  id      String   @id
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String   @db.Uuid
  expires DateTime @db.Timestamptz(3)
}
