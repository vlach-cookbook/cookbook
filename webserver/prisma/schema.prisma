// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  extensions        = [citext]
}

model Recipe {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime           @updatedAt @db.Timestamptz(3)
  author      User               @relation(fields: [authorId], references: [id])
  authorId    String             @db.Uuid
  name        String             @db.Citext
  slug        String             @db.Citext
  servings    Int?
  ingredients RecipeIngredient[]
  categories  Category[]
  steps       String[]

  @@unique([authorId, name])
  @@unique([authorId, slug])
}

/// An ingredient line in a recipe, like "1 cup sugar".
model RecipeIngredient {
  id Int @id @default(autoincrement())

  /// Gives the ingredients an order in the recipe.
  order       Int?
  amount      String?
  /// A missing unit means the ingredient comes in items, like "3 eggs".
  unit        String?
  name        String
  /// How the ingredient was prepared, like "chopped".
  preparation String?

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int

  @@unique([recipeId, order])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique @db.Citext

  Recipes Recipe[]
}

model User {
  id       String   @id @default(uuid()) @db.Uuid
  name     String?
  username String?  @unique @db.Citext
  Recipes  Recipe[]

  GoogleUser GoogleUser[]
  sessions   Session[]
}

model GoogleUser {
  /// Google's ID, exposed as the 'sub' claim in their JWTs.
  gid    String @id
  /// The user's verified email address, which this app uses to create inter-user trust
  /// relationships.
  email  String @unique
  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

model Session {
  // 128-bit random ID, base64url-encoded, for storing in a client-side cookie.
  id      String   @id
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @db.Uuid
  expires DateTime @db.Timestamptz(3)
}
