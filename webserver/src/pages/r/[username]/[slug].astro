---
import Markdown from "@components/Markdown.astro";
import { AddRecipeNote, RecipeNote } from "@components/RecipeNote";
import Layout from "@layouts/Layout.astro";
import { getLogin } from "@lib/login-cookie";
import { prisma } from "@lib/prisma";
import type {
  Category,
  Recipe,
  RecipeIngredient,
  RecipeNote as DBRecipeNote,
  User,
} from "@prisma/client";

const activeUser = await getLogin(Astro.cookies);

// Grab this recipe.
const { username, slug } = Astro.params;
let recipe:
  | (Recipe & {
      author: User;
      ingredients: RecipeIngredient[];
      categories: Category[];
      notes: (DBRecipeNote & {
        author: Pick<User, "name" | "username">;
      })[];
    })
  | null = null;
if (slug && username) {
  recipe = await prisma.recipe.findFirst({
    where: { author: { username }, slug },
    include: {
      author: true,
      ingredients: { orderBy: { order: "asc" } },
      categories: { orderBy: { name: "asc" } },
      notes: {
        where: {
          content: { not: "" },
          OR: [{ public: true, hidden: false }, { authorId: activeUser?.id }],
        },
        orderBy: { createdAt: "asc" },
        include: {
          author: { select: { name: true, username: true } },
        },
      },
    },
  });
}
---

<script>
  import "@github/relative-time-element";
</script>

<Layout title={recipe?.name ?? "No such recipe"} user={activeUser}>
  {
    recipe ? (
      <main class="recipe" itemscope itemtype="https://schema.org/Recipe">
        <h2 itemprop="name">{recipe.name}</h2>
        <p>
          by
          <a href={`/r/${recipe.author.username}`} itemprop="author">
            {recipe.author.name}
          </a>
        </p>
        {recipe.servings ? (
          <p itemprop="recipeYield">{recipe.servings} Servings</p>
        ) : null}
        <section>
          <h3>Ingredients</h3>
          <ul>
            {recipe.ingredients.map((ingredient) => (
              <li
                itemprop="recipeIngredient"
                itemscope
                itemtype="https://schema.org/HowToSupply"
              >
                {ingredient.amount ? (
                  <span
                    itemprop="requiredQuantity"
                    itemscope
                    itemtype="https://schema.org/QuantitativeValue"
                  >
                    <span itemprop="value" class="frac">
                      {ingredient.amount}
                    </span>
                    {ingredient.unit ? (
                      <span itemprop="unitText">{ingredient.unit}</span>
                    ) : null}
                  </span>
                ) : null}
                <span itemprop="name">
                  {ingredient.name +
                    (ingredient.preparation
                      ? `, ${ingredient.preparation}`
                      : "")}
                </span>
              </li>
            ))}
          </ul>
        </section>

        <section>
          <h3>Instructions</h3>
          {recipe.steps.length === 1 ? (
            <div itemprop="recipeInstructions">
              <Markdown source={recipe.steps[0]!} />
            </div>
          ) : (
            <ol>
              {recipe.steps.map((step) => (
                <li itemprop="recipeInstructions">
                  <Markdown source={step} />
                </li>
              ))}
            </ol>
          )}
        </section>

        {recipe.categories.length > 0 ? (
          <section class="noprint">
            <h3>Categories</h3>
            <ul>
              {recipe.categories.map((category) => (
                <li itemprop="recipeCategory">
                  <a
                    href={`/search?category=${encodeURIComponent(
                      category.name.replaceAll(" ", "_"),
                    )}`}
                  >
                    {category.name}
                  </a>
                </li>
              ))}
            </ul>
          </section>
        ) : null}

        <section id="notes" class:list={{ noprint: recipe.notes.length === 0 }}>
          <h3>Notes</h3>
          <ol style={{ "padding-left": "0px" }}>
            {recipe.notes.map((note) =>
              note.authorId === activeUser?.id ||
              recipe!.authorId == activeUser?.id ? (
                <RecipeNote
                  note={note}
                  activeUserWroteNote={note.authorId === activeUser?.id}
                  activeUserWroteRecipe={recipe!.authorId == activeUser?.id}
                  client:idle
                />
              ) : (
                <RecipeNote note={note} />
              ),
            )}
          </ol>
          {activeUser ? (
            <AddRecipeNote
              recipeId={recipe.id}
              editingUser={activeUser}
              client:idle
            />
          ) : null}
        </section>

        <nav id="options" class="noprint">
          <a href="javascript:window.print()" class="action">
            Print
          </a>
          {activeUser?.id === recipe.authorId ? (
            <>
              <a href={`/edit/${username}/${slug}`} class="action">
                Edit
              </a>
              <a href="" class="action">
                Delete
              </a>
            </>
          ) : null}
        </nav>
        <!-- Satisfy Google's recipe parser, which insists on an image. -->
        <link itemprop="image" href="https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg">
      </main>
    ) : (
      <p>No such recipe.</p>
    )
  }
</Layout>

<style is:global>
  [itemprop="recipeInstructions"] {
    font-variant-numeric: oldstyle-nums;
  }
</style>
