---
import Markdown from "@components/Markdown.astro";
import { AddRecipeNote, RecipeNote } from "@components/RecipeNote";
import RenderSource from "@components/RenderSource.astro";
import { Temporal } from "@js-temporal/polyfill";
import Layout from "@layouts/Layout.astro";
import { getLogin } from "@lib/login-cookie";
import { prisma } from "@lib/prisma";
import slugify from "@lib/slugify";
import { andList, numericAscending } from "@lib/util";
import type {
  Category,
  RecipeNote as DBRecipeNote,
  CookingHistory as DbCookingHistory,
  Recipe,
  RecipeIngredient,
  RecipeSource,
  User,
} from "@prisma/client";

const activeUser = await getLogin(Astro.cookies);

// Grab this recipe.
const { username, slug } = Astro.params;
let recipe:
  | (Recipe & {
      author: User;
      sources: RecipeSource[];
      ingredients: RecipeIngredient[];
      categories: Category[];
      cookingHistory: Pick<
        DbCookingHistory,
        "id" | "cookedAtYear" | "cookedAtMonth" | "cookedAtDay"
      >[];
      notes: (DBRecipeNote & {
        author: Pick<User, "name" | "username">;
      })[];
    })
  | null = null;
if (slug && username) {
  recipe = await prisma.recipe.findFirst({
    where: { author: { username }, slug },
    include: {
      author: true,
      sources: { orderBy: { type: "asc" } },
      ingredients: { orderBy: { order: "asc" } },
      categories: { orderBy: { name: "asc" } },
      cookingHistory: {
        where: { cookId: activeUser?.id },
        orderBy: [
          { cookedAtYear: "desc" },
          { cookedAtMonth: "desc" },
          { cookedAtDay: "desc" },
        ],
        select: {
          id: true,
          cookedAtYear: true,
          cookedAtMonth: true,
          cookedAtDay: true,
        },
      },
      notes: {
        where: {
          content: { not: "" },
          OR: [{ public: true, hidden: false }, { authorId: activeUser?.id }],
        },
        orderBy: { createdAt: "asc" },
        include: {
          author: { select: { name: true, username: true } },
        },
      },
    },
  });
}

const ingredientNames = recipe?.ingredients.map(
  (ingredient) => ingredient.name
);

const cookingHistory: { ym: Temporal.PlainYearMonth; days: number[] }[] = [];
if (recipe) {
  for (const entry of recipe.cookingHistory) {
    let ym: Temporal.PlainYearMonth;
    try {
      ym = new Temporal.PlainYearMonth(entry.cookedAtYear, entry.cookedAtMonth);
    } catch {
      // Ignore invalid dates.
      continue;
    }
    // Aggregate a list of months the recipe was cooked, and if days are available, make a list of
    // them.
    let latest = cookingHistory[cookingHistory.length - 1];
    if (latest === undefined || !latest.ym.equals(ym)) {
      latest = { ym, days: [] };
      cookingHistory.push(latest);
    }
    if (
      entry.cookedAtDay &&
      // Only valid days.
      entry.cookedAtDay > 0 &&
      entry.cookedAtDay <= ym.daysInMonth
    ) {
      latest.days.push(entry.cookedAtDay);
    }
  }
}
---

<script>
  import "@github/relative-time-element";
</script>

<Layout
  title={recipe?.name ?? "No such recipe"}
  user={activeUser}
  showScreenLock
>
  {
    recipe ? (
      <div class="recipe" itemscope itemtype="https://schema.org/Recipe">
        <h2 itemprop="name">{recipe.name}</h2>
        <p class="sources">
          <small>
            {recipe.sources.map((source) => (
              <>
                <RenderSource {source} />
                <br />
              </>
            ))}
            {recipe.sources.length > 0 ? "curated by" : "by"}
            <a href={`/r/${recipe.author.username}`} itemprop="author">
              {recipe.author.name}
            </a>
          </small>
        </p>
        {recipe.servings ? (
          <p itemprop="recipeYield">{recipe.servings} Servings</p>
        ) : null}
        <section>
          <h3>Ingredients</h3>
          <ul>
            {recipe.ingredients.map((ingredient) => (
              <li
                itemprop="recipeIngredient"
                itemscope
                itemtype="https://schema.org/HowToSupply"
                id={slugify(ingredient.name)}
              >
                {ingredient.amount ? (
                  <span
                    itemprop="requiredQuantity"
                    itemscope
                    itemtype="https://schema.org/QuantitativeValue"
                  >
                    <span itemprop="value" class="frac">
                      {ingredient.amount}
                    </span>
                    {ingredient.unit ? (
                      <span itemprop="unitText">{ingredient.unit}</span>
                    ) : null}
                  </span>
                ) : null}
                <span itemprop="name">
                  {ingredient.name +
                    (ingredient.preparation
                      ? `, ${ingredient.preparation}`
                      : "")}
                </span>
              </li>
            ))}
          </ul>
        </section>

        <section>
          <h3>Instructions</h3>
          {recipe.steps.length === 1 ? (
            <div itemprop="recipeInstructions">
              <Markdown source={recipe.steps[0]!} {ingredientNames} />
            </div>
          ) : (
            <ol>
              {recipe.steps.map((step) => (
                <li itemprop="recipeInstructions">
                  <Markdown source={step} {ingredientNames} />
                </li>
              ))}
            </ol>
          )}
        </section>

        {recipe.categories.length > 0 ? (
          <section class="noprint">
            <h3>Categories</h3>
            <ul>
              {recipe.categories.map((category) => (
                <li itemprop="recipeCategory">
                  <a
                    href={`/search?category=${encodeURIComponent(
                      category.name.replaceAll(" ", "_")
                    )}`}
                  >
                    {category.name}
                  </a>
                </li>
              ))}
            </ul>
          </section>
        ) : null}

        {activeUser ? (
          <section id="cooking-history" class="noprint">
            <hgroup>
              <h3>Cooking History</h3>
              <button
                title="Record that I'm cooking this recipe in my cooking history."
                type="submit"
                form="edit_cooking_history"
                name="put"
                value="1"
                data-action-base-path={`${slug}/cooking_history/${activeUser.username}/`}
                formaction={`${slug}/cooking_history/${activeUser.username}/${Temporal.Now.plainDateISO("UTC")}`}
              >
                üç≤
              </button>
            </hgroup>
            <form method="post" id="edit_cooking_history">
              <input
                type="hidden"
                name="from"
                value={`${Astro.url.href}#cooking-history`}
              />
            </form>
            {cookingHistory.length > 0 ? (
              <ul>
                {cookingHistory.map(({ ym, days }) => (
                  <li>
                    <time
                      datetime={ym.toString()}
                      title={`${ym.toLocaleString("en", {
                        month: "short",
                        calendar: ym.calendarId,
                      })} ${andList.format(days.sort(numericAscending).map(String))}`}
                    >
                      {ym.toLocaleString("en", {
                        month: "short",
                        year: "numeric",
                        calendar: ym.calendarId,
                      })}
                    </time>
                  </li>
                ))}
              </ul>
            ) : null}
          </section>
        ) : null}

        <section id="notes" class:list={{ noprint: recipe.notes.length === 0 }}>
          <h3>Notes</h3>
          <ol style={{ "padding-left": "0px" }}>
            {recipe.notes.map((note) =>
              note.authorId === activeUser?.id ||
              recipe!.authorId == activeUser?.id ? (
                <RecipeNote
                  note={note}
                  activeUserWroteNote={note.authorId === activeUser?.id}
                  activeUserWroteRecipe={recipe!.authorId == activeUser?.id}
                  client:idle
                />
              ) : (
                <RecipeNote note={note} />
              )
            )}
          </ol>
          {activeUser ? (
            <AddRecipeNote
              recipeId={recipe.id}
              editingUser={activeUser}
              client:idle
            />
          ) : null}
        </section>

        <nav id="options" class="noprint">
          <a href="javascript:window.print()" class="action">
            Print
          </a>
          {activeUser?.id === recipe.authorId ? (
            <>
              <a href={`/edit/${username}/${slug}`} class="action">
                Edit
              </a>
              <a href="" class="action">
                Delete
              </a>
            </>
          ) : null}
        </nav>
        {/* Satisfy Google's recipe parser, which insists on an image. */}
        <link
          itemprop="image"
          href="https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg"
        />
      </div>
    ) : (
      <p>No such recipe.</p>
    )
  }
</Layout>

<script>
  function twoDigits(num: number) {
    return String(num).padStart(2, "0");
  }
  // Updates the cooking history button to use the local date and not UTC.
  const cookingHistoryForm = document.forms.namedItem("edit_cooking_history");
  if (cookingHistoryForm) {
    const putButton = cookingHistoryForm.elements.namedItem("put");
    if (putButton instanceof HTMLButtonElement) {
      const basePath = putButton.dataset.actionBasePath;
      if (basePath) {
        const now = new Date();
        const path =
          basePath +
          `${now.getFullYear()}-${twoDigits(now.getMonth() + 1)}-${twoDigits(now.getDate())}`;
        putButton.formAction = path;
      }
    }
  }
</script>

<style is:global>
  [itemprop="recipeInstructions"] {
    font-variant-numeric: oldstyle-nums;
  }

  .sources {
    float: right;
    width: fit-content;
    text-align: right;
  }

  #cooking-history > hgroup {
    display: flex;
    flex-flow: row wrap;
    align-items: center;
    gap: 0.25em;
  }
</style>
